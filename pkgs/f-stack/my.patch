diff --git a/freebsd/netinet/ip_output.c b/freebsd/netinet/ip_output.c
index 2d45d583..0d648487 100644
--- a/freebsd/netinet/ip_output.c
+++ b/freebsd/netinet/ip_output.c
@@ -737,16 +737,7 @@ sendit:
 	}
 
 	m->m_pkthdr.csum_flags |= CSUM_IP;
-	if (m->m_pkthdr.csum_flags & CSUM_DELAY_DATA & ~ifp->if_hwassist) {
-		m = mb_unmapped_to_ext(m);
-		if (m == NULL) {
-			IPSTAT_INC(ips_odropped);
-			error = ENOBUFS;
-			goto bad;
-		}
-		in_delayed_cksum(m);
-		m->m_pkthdr.csum_flags &= ~CSUM_DELAY_DATA;
-	} else if ((ifp->if_capenable & IFCAP_NOMAP) == 0) {
+	if ((ifp->if_capenable & IFCAP_NOMAP) == 0) {
 		m = mb_unmapped_to_ext(m);
 		if (m == NULL) {
 			IPSTAT_INC(ips_odropped);
@@ -778,10 +769,6 @@ sendit:
 	    (m->m_pkthdr.csum_flags & ifp->if_hwassist &
 	    (CSUM_TSO | CSUM_INNER_TSO)) != 0) {
 		ip->ip_sum = 0;
-		if (m->m_pkthdr.csum_flags & CSUM_IP & ~ifp->if_hwassist) {
-			ip->ip_sum = in_cksum(m, hlen);
-			m->m_pkthdr.csum_flags &= ~CSUM_IP;
-		}
 
 		/*
 		 * Record statistics for this interface address.
@@ -898,20 +885,6 @@ ip_fragment(struct ip *ip, struct mbuf **m_frag, int mtu,
 	if (len < 8)
 		return EMSGSIZE;
 
-	/*
-	 * If the interface will not calculate checksums on
-	 * fragmented packets, then do it here.
-	 */
-	if (m0->m_pkthdr.csum_flags & CSUM_DELAY_DATA) {
-		m0 = mb_unmapped_to_ext(m0);
-		if (m0 == NULL) {
-			error = ENOBUFS;
-			IPSTAT_INC(ips_odropped);
-			goto done;
-		}
-		in_delayed_cksum(m0);
-		m0->m_pkthdr.csum_flags &= ~CSUM_DELAY_DATA;
-	}
 #if defined(SCTP) || defined(SCTP_SUPPORT)
 	if (m0->m_pkthdr.csum_flags & CSUM_SCTP) {
 		m0 = mb_unmapped_to_ext(m0);
@@ -1027,10 +1000,6 @@ smart_frag_failure:
 #endif
 		mhip->ip_off = htons(mhip->ip_off);
 		mhip->ip_sum = 0;
-		if (m->m_pkthdr.csum_flags & CSUM_IP & ~if_hwassist_flags) {
-			mhip->ip_sum = in_cksum(m, mhlen);
-			m->m_pkthdr.csum_flags &= ~CSUM_IP;
-		}
 		*mnext = m;
 		mnext = &m->m_nextpkt;
 	}
@@ -1045,10 +1014,6 @@ smart_frag_failure:
 	ip->ip_len = htons((u_short)m0->m_pkthdr.len);
 	ip->ip_off = htons(ip_off | IP_MF);
 	ip->ip_sum = 0;
-	if (m0->m_pkthdr.csum_flags & CSUM_IP & ~if_hwassist_flags) {
-		ip->ip_sum = in_cksum(m0, hlen);
-		m0->m_pkthdr.csum_flags &= ~CSUM_IP;
-	}
 
 done:
 	*m_frag = m0;
@@ -1608,21 +1573,12 @@ ip_mloopback(struct ifnet *ifp, const struct mbuf *m, int hlen)
 	if (copym != NULL && (!M_WRITABLE(copym) || copym->m_len < hlen))
 		copym = m_pullup(copym, hlen);
 	if (copym != NULL) {
-		/* If needed, compute the checksum and mark it as valid. */
-		if (copym->m_pkthdr.csum_flags & CSUM_DELAY_DATA) {
-			in_delayed_cksum(copym);
-			copym->m_pkthdr.csum_flags &= ~CSUM_DELAY_DATA;
-			copym->m_pkthdr.csum_flags |=
-			    CSUM_DATA_VALID | CSUM_PSEUDO_HDR;
-			copym->m_pkthdr.csum_data = 0xffff;
-		}
 		/*
 		 * We don't bother to fragment if the IP length is greater
 		 * than the interface's MTU.  Can this possibly matter?
 		 */
 		ip = mtod(copym, struct ip *);
 		ip->ip_sum = 0;
-		ip->ip_sum = in_cksum(copym, hlen);
 		if_simloop(ifp, copym, AF_INET, 0);
 	}
 }
diff --git a/freebsd/netinet/tcp.h b/freebsd/netinet/tcp.h
index 0b71bd46..d62e56aa 100644
--- a/freebsd/netinet/tcp.h
+++ b/freebsd/netinet/tcp.h
@@ -140,7 +140,7 @@ struct tcphdr {
  * link MTU (256 bytes for AX.25 packet radio).  However, a connection is very
  * unlikely to come across such low MTU interfaces these days (anno domini 2003).
  */
-#define	TCP_MINMSS 216
+#define	TCP_MINMSS 1
 
 #define	TCP_MAXWIN	65535	/* largest value for (unscaled) window */
 #define	TTCP_CLIENT_SND_WND	4096	/* dflt send window for T/TCP client */
diff --git a/freebsd/netinet/tcp_input.c b/freebsd/netinet/tcp_input.c
index 3efc100b..6903daed 100644
--- a/freebsd/netinet/tcp_input.c
+++ b/freebsd/netinet/tcp_input.c
@@ -3906,14 +3906,6 @@ tcp_mssopt(struct in_conninfo *inc)
 		min_protoh = sizeof(struct tcpiphdr);
 	}
 #endif
-#if defined(INET6) || defined(INET)
-	thcmtu = tcp_hc_getmtu(inc); /* IPv4 and IPv6 */
-#endif
-
-	if (maxmtu && thcmtu)
-		mss = min(maxmtu, thcmtu) - min_protoh;
-	else if (maxmtu || thcmtu)
-		mss = max(maxmtu, thcmtu) - min_protoh;
 
 	return (mss);
 }
diff --git a/freebsd/netinet/tcp_output.c b/freebsd/netinet/tcp_output.c
index d4b5a328..7e984e33 100644
--- a/freebsd/netinet/tcp_output.c
+++ b/freebsd/netinet/tcp_output.c
@@ -1330,31 +1320,6 @@ send:
 		}
 	}
 #endif
-#ifdef INET6
-	if (isipv6) {
-		/*
-		 * There is no need to fill in ip6_plen right now.
-		 * It will be filled later by ip6_output.
-		 */
-		m->m_pkthdr.csum_flags = CSUM_TCP_IPV6;
-		th->th_sum = in6_cksum_pseudo(ip6, sizeof(struct tcphdr) +
-		    optlen + len, IPPROTO_TCP, 0);
-	}
-#endif
-#if defined(INET6) && defined(INET)
-	else
-#endif
-#ifdef INET
-	{
-		m->m_pkthdr.csum_flags = CSUM_TCP;
-		th->th_sum = in_pseudo(ip->ip_src.s_addr, ip->ip_dst.s_addr,
-		    htons(sizeof(struct tcphdr) + IPPROTO_TCP + len + optlen));
-
-		/* IP version must be set here for ipv4/ipv6 checking later */
-		KASSERT(ip->ip_v == IPVERSION,
-		    ("%s: IP version incorrect: %d", __func__, ip->ip_v));
-	}
-#endif
 
 	/*
 	 * Enable TSO and specify the size of the segments.
diff --git a/lib/ff_config.c b/lib/ff_config.c
index 9607abfd..604187ef 100644
--- a/lib/ff_config.c
+++ b/lib/ff_config.c
@@ -174,7 +174,8 @@ freebsd_conf_handler(struct ff_config *cfg, const char *section,
         cur = &cfg->freebsd.sysctl;
 
         if (is_integer(value)) {
-            if (strcmp(name, "kern.ipc.maxsockbuf") == 0) {
+	    if ((strcmp(name, "kern.ipc.maxsockbuf") == 0) ||
+		(strcmp(name, "net.inet.udp.maxdgram") == 0)) {
                 long *p = (long *)malloc(sizeof(long));
                 *p = atol(value);
                 newconf->value = (void *)p;
diff --git a/lib/ff_dpdk_if.c b/lib/ff_dpdk_if.c
index 72317f1b..59fda6f7 100644
--- a/lib/ff_dpdk_if.c
+++ b/lib/ff_dpdk_if.c
@@ -626,29 +626,6 @@ init_port_start(void)
             rte_memcpy(pconf->mac,
                 addr.addr_bytes, RTE_ETHER_ADDR_LEN);
 
-            /* Set RSS mode */
-            uint64_t default_rss_hf = ETH_RSS_PROTO_MASK;
-            port_conf.rxmode.mq_mode = ETH_MQ_RX_RSS;
-            port_conf.rx_adv_conf.rss_conf.rss_hf = default_rss_hf;
-            if (dev_info.hash_key_size == 52) {
-                rsskey = default_rsskey_52bytes;
-                rsskey_len = 52;
-            }
-            if (ff_global_cfg.dpdk.symmetric_rss) {
-                printf("Use symmetric Receive-side Scaling(RSS) key\n");
-                rsskey = symmetric_rsskey;
-            }
-            port_conf.rx_adv_conf.rss_conf.rss_key = rsskey;
-            port_conf.rx_adv_conf.rss_conf.rss_key_len = rsskey_len;
-            port_conf.rx_adv_conf.rss_conf.rss_hf &= dev_info.flow_type_rss_offloads;
-            if (port_conf.rx_adv_conf.rss_conf.rss_hf !=
-                    ETH_RSS_PROTO_MASK) {
-                printf("Port %u modified RSS hash function based on hardware support,"
-                        "requested:%#"PRIx64" configured:%#"PRIx64"\n",
-                        port_id, default_rss_hf,
-                        port_conf.rx_adv_conf.rss_conf.rss_hf);
-            }
-
             if (dev_info.tx_offload_capa & DEV_TX_OFFLOAD_MBUF_FAST_FREE) {
                 port_conf.txmode.offloads |=
                     DEV_TX_OFFLOAD_MBUF_FAST_FREE;
@@ -673,53 +650,23 @@ init_port_start(void)
             }
             #endif
 
-            /* Set Rx checksum checking */
-            if ((dev_info.rx_offload_capa & DEV_RX_OFFLOAD_IPV4_CKSUM) &&
-                (dev_info.rx_offload_capa & DEV_RX_OFFLOAD_UDP_CKSUM) &&
-                (dev_info.rx_offload_capa & DEV_RX_OFFLOAD_TCP_CKSUM)) {
-                printf("RX checksum offload supported\n");
-                port_conf.rxmode.offloads |= DEV_RX_OFFLOAD_CHECKSUM;
-                pconf->hw_features.rx_csum = 1;
-            }
-
-            if (ff_global_cfg.dpdk.tx_csum_offoad_skip == 0) {
-                if ((dev_info.tx_offload_capa & DEV_TX_OFFLOAD_IPV4_CKSUM)) {
-                    printf("TX ip checksum offload supported\n");
-                    port_conf.txmode.offloads |= DEV_TX_OFFLOAD_IPV4_CKSUM;
-                    pconf->hw_features.tx_csum_ip = 1;
-                }
-
-                if ((dev_info.tx_offload_capa & DEV_TX_OFFLOAD_UDP_CKSUM) &&
-                    (dev_info.tx_offload_capa & DEV_TX_OFFLOAD_TCP_CKSUM)) {
-                    printf("TX TCP&UDP checksum offload supported\n");
-                    port_conf.txmode.offloads |= DEV_TX_OFFLOAD_UDP_CKSUM | DEV_TX_OFFLOAD_TCP_CKSUM;
-                    pconf->hw_features.tx_csum_l4 = 1;
-                }
-            } else {
-                printf("TX checksum offoad is disabled\n");
-            }
-
-            if (ff_global_cfg.dpdk.tso) {
-                if (dev_info.tx_offload_capa & DEV_TX_OFFLOAD_TCP_TSO) {
-                    printf("TSO is supported\n");
-                    port_conf.txmode.offloads |= DEV_TX_OFFLOAD_TCP_TSO;
-                    pconf->hw_features.tx_tso = 1;
-                }
-                else {
-                    printf("TSO is not supported\n");
-                }
-            } else {
-                printf("TSO is disabled\n");
-            }
-
-            if (dev_info.reta_size) {
-                /* reta size must be power of 2 */
-                assert((dev_info.reta_size & (dev_info.reta_size - 1)) == 0);
-
-                rss_reta_size[port_id] = dev_info.reta_size;
-                printf("port[%d]: rss table size: %d\n", port_id,
-                    dev_info.reta_size);
-            }
+	    /* Set Rx checksum checking */
+	    if (ff_global_cfg.dpdk.tx_csum_offoad_skip == 0) {
+		    if ((dev_info.tx_offload_capa & DEV_TX_OFFLOAD_IPV4_CKSUM)) {
+			    printf("TX ip checksum offload supported\n");
+			    port_conf.txmode.offloads |= DEV_TX_OFFLOAD_IPV4_CKSUM;
+			    pconf->hw_features.tx_csum_ip = 1;
+		    }
+
+		    if ((dev_info.tx_offload_capa & DEV_TX_OFFLOAD_UDP_CKSUM) &&
+				    (dev_info.tx_offload_capa & DEV_TX_OFFLOAD_TCP_CKSUM)) {
+			    printf("TX TCP&UDP checksum offload supported\n");
+			    port_conf.txmode.offloads |= DEV_TX_OFFLOAD_UDP_CKSUM | DEV_TX_OFFLOAD_TCP_CKSUM;
+			    pconf->hw_features.tx_csum_l4 = 1;
+		    }
+	    } else {
+		    printf("TX checksum offoad is disabled\n");
+	    }
 
             if (rte_eal_process_type() != RTE_PROC_PRIMARY) {
                 continue;
@@ -796,15 +743,6 @@ init_port_start(void)
             if (ret < 0) {
                 return ret;
             }
-    //RSS reta update will failed when enable flow isolate
-    #ifndef FF_FLOW_ISOLATE
-            if (nb_queues > 1) {
-                /*
-                 * FIXME: modify RSS set to FDIR
-                 */
-                set_rss_table(port_id, dev_info.reta_size, nb_queues);
-            }
-    #endif
 
             /* Enable RX in promiscuous mode for the Ethernet device. */
             if (ff_global_cfg.dpdk.promiscuous) {
@@ -1240,18 +1178,10 @@ ff_dpdk_init(int argc, char **argv)
 static void
 ff_veth_input(const struct ff_dpdk_if_context *ctx, struct rte_mbuf *pkt)
 {
-    uint8_t rx_csum = ctx->hw_features.rx_csum;
-    if (rx_csum) {
-        if (pkt->ol_flags & (RTE_MBUF_F_RX_IP_CKSUM_BAD | RTE_MBUF_F_RX_L4_CKSUM_BAD)) {
-            rte_pktmbuf_free(pkt);
-            return;
-        }
-    }
-
     void *data = rte_pktmbuf_mtod(pkt, void*);
     uint16_t len = rte_pktmbuf_data_len(pkt);
 
-    void *hdr = ff_mbuf_gethdr(pkt, pkt->pkt_len, data, len, rx_csum);
+    void *hdr = ff_mbuf_gethdr(pkt, pkt->pkt_len, data, len);
     if (hdr == NULL) {
         rte_pktmbuf_free(pkt);
         return;
@@ -1889,61 +1819,35 @@ ff_dpdk_if_send(struct ff_dpdk_if_context *ctx, void *m,
     void *data = rte_pktmbuf_mtod(head, void*);
 
     if (offload.ip_csum) {
-        /* ipv6 not supported yet */
-        struct rte_ipv4_hdr *iph;
-        int iph_len;
-        iph = (struct rte_ipv4_hdr *)(data + RTE_ETHER_HDR_LEN);
-        iph_len = (iph->version_ihl & 0x0f) << 2;
+	/* ipv6 not supported yet */
+	struct rte_ipv4_hdr *iph;
+	int iph_len;
+	iph = (struct rte_ipv4_hdr *)(data + RTE_ETHER_HDR_LEN);
+	iph_len = (iph->version_ihl & 0x0f) << 2;
 
-        head->ol_flags |= RTE_MBUF_F_TX_IP_CKSUM | RTE_MBUF_F_TX_IPV4;
-        head->l2_len = RTE_ETHER_HDR_LEN;
-        head->l3_len = iph_len;
+	head->ol_flags |= RTE_MBUF_F_TX_IP_CKSUM | RTE_MBUF_F_TX_IPV4;
+	head->l2_len = RTE_ETHER_HDR_LEN;
+	head->l3_len = iph_len;
     }
 
     if (ctx->hw_features.tx_csum_l4) {
-        struct rte_ipv4_hdr *iph;
-        int iph_len;
-        iph = (struct rte_ipv4_hdr *)(data + RTE_ETHER_HDR_LEN);
-        iph_len = (iph->version_ihl & 0x0f) << 2;
-
-        if (offload.tcp_csum) {
-            head->ol_flags |= RTE_MBUF_F_TX_TCP_CKSUM;
-            head->l2_len = RTE_ETHER_HDR_LEN;
-            head->l3_len = iph_len;
-        }
-
-        /*
-         *  TCP segmentation offload.
-         *
-         *  - set the PKT_TX_TCP_SEG flag in mbuf->ol_flags (this flag
-         *    implies PKT_TX_TCP_CKSUM)
-         *  - set the flag PKT_TX_IPV4 or PKT_TX_IPV6
-         *  - if it's IPv4, set the PKT_TX_IP_CKSUM flag and
-         *    write the IP checksum to 0 in the packet
-         *  - fill the mbuf offload information: l2_len,
-         *    l3_len, l4_len, tso_segsz
-         *  - calculate the pseudo header checksum without taking ip_len
-         *    in account, and set it in the TCP header. Refer to
-         *    rte_ipv4_phdr_cksum() and rte_ipv6_phdr_cksum() that can be
-         *    used as helpers.
-         */
-        if (offload.tso_seg_size) {
-            struct rte_tcp_hdr *tcph;
-            int tcph_len;
-            tcph = (struct rte_tcp_hdr *)((char *)iph + iph_len);
-            tcph_len = (tcph->data_off & 0xf0) >> 2;
-            tcph->cksum = rte_ipv4_phdr_cksum(iph, RTE_MBUF_F_TX_TCP_SEG);
-
-            head->ol_flags |= RTE_MBUF_F_TX_TCP_SEG;
-            head->l4_len = tcph_len;
-            head->tso_segsz = offload.tso_seg_size;
-        }
-
-        if (offload.udp_csum) {
-            head->ol_flags |= RTE_MBUF_F_TX_UDP_CKSUM;
-            head->l2_len = RTE_ETHER_HDR_LEN;
-            head->l3_len = iph_len;
-        }
+	    struct rte_ipv4_hdr *iph;
+	    int iph_len;
+	    iph = (struct rte_ipv4_hdr *)(data + RTE_ETHER_HDR_LEN);
+	    iph_len = (iph->version_ihl & 0x0f) << 2;
+
+	    if (offload.tcp_csum) {
+		    head->ol_flags |= RTE_MBUF_F_TX_TCP_CKSUM;
+		    head->l2_len = RTE_ETHER_HDR_LEN;
+		    head->l3_len = iph_len;
+	
+	    }
+
+	    if (offload.udp_csum) {
+		    head->ol_flags |= RTE_MBUF_F_TX_UDP_CKSUM;
+		    head->l2_len = RTE_ETHER_HDR_LEN;
+		    head->l3_len = iph_len;
+	    }
     }
 
     ff_mbuf_free(m);
diff --git a/lib/ff_dpdk_if.h b/lib/ff_dpdk_if.h
index d930b8dd..ef8f3408 100644
--- a/lib/ff_dpdk_if.h
+++ b/lib/ff_dpdk_if.h
@@ -44,11 +44,11 @@ struct ff_dpdk_if_context;
 struct ff_port_cfg;
 
 struct ff_tx_offload {
-    uint8_t ip_csum;
-    uint8_t tcp_csum;
-    uint8_t udp_csum;
-    uint8_t sctp_csum;
-    uint16_t tso_seg_size;
+	uint8_t ip_csum;
+	uint8_t tcp_csum;
+	uint8_t udp_csum;
+	uint8_t sctp_csum;
+	uint16_t tso_seg_size;
 };
 
 struct ff_dpdk_if_context *ff_dpdk_register_if(void *sc, void *ifp,
diff --git a/lib/ff_memory.c b/lib/ff_memory.c
index 63e6686a..a47fd29e 100644
--- a/lib/ff_memory.c
+++ b/lib/ff_memory.c
@@ -315,64 +315,6 @@ static inline void ff_offload_set(struct ff_dpdk_if_context *ctx, void *m, struc
     
     ff_mbuf_tx_offload(m, &offload);
     data = rte_pktmbuf_mtod(head, void*);
-
-    if (offload.ip_csum) {
-        /* ipv6 not supported yet */
-        struct rte_ipv4_hdr *iph;
-        int iph_len;
-        iph = (struct rte_ipv4_hdr *)(data + RTE_ETHER_HDR_LEN);
-        iph_len = (iph->version_ihl & 0x0f) << 2;
-
-        head->ol_flags |= PKT_TX_IP_CKSUM | PKT_TX_IPV4;
-        head->l2_len = RTE_ETHER_HDR_LEN;
-        head->l3_len = iph_len;
-    }
-
-    if (ctx->hw_features.tx_csum_l4) {
-        struct rte_ipv4_hdr *iph;
-        int iph_len;
-        iph = (struct rte_ipv4_hdr *)(data + RTE_ETHER_HDR_LEN);
-        iph_len = (iph->version_ihl & 0x0f) << 2;
-
-        if (offload.tcp_csum) {
-            head->ol_flags |= PKT_TX_TCP_CKSUM;
-            head->l2_len = RTE_ETHER_HDR_LEN;
-            head->l3_len = iph_len;
-        }
-
-       /*
-         *  TCP segmentation offload.
-         *
-         *  - set the PKT_TX_TCP_SEG flag in mbuf->ol_flags (this flag
-         *    implies PKT_TX_TCP_CKSUM)
-         *  - set the flag PKT_TX_IPV4 or PKT_TX_IPV6
-         *  - if it's IPv4, set the PKT_TX_IP_CKSUM flag and
-         *    write the IP checksum to 0 in the packet
-         *  - fill the mbuf offload information: l2_len,
-         *    l3_len, l4_len, tso_segsz
-         *  - calculate the pseudo header checksum without taking ip_len
-         *    in account, and set it in the TCP header. Refer to
-         *    rte_ipv4_phdr_cksum() and rte_ipv6_phdr_cksum() that can be
-         *    used as helpers.
-         */
-        if (offload.tso_seg_size) {
-            struct rte_tcp_hdr *tcph;
-            int tcph_len;
-            tcph = (struct rte_tcp_hdr *)((char *)iph + iph_len);
-            tcph_len = (tcph->data_off & 0xf0) >> 2;
-            tcph->cksum = rte_ipv4_phdr_cksum(iph, PKT_TX_TCP_SEG);
-
-            head->ol_flags |= PKT_TX_TCP_SEG;
-            head->l4_len = tcph_len;
-            head->tso_segsz = offload.tso_seg_size;
-        }
-
-        if (offload.udp_csum) {
-            head->ol_flags |= PKT_TX_UDP_CKSUM;
-            head->l2_len = RTE_ETHER_HDR_LEN;
-            head->l3_len = iph_len;
-        }
-    }
 }
 
 // create rte_buf refer to data which is transmit from bsd stack by EXT_CLUSTER.
diff --git a/lib/ff_veth.c b/lib/ff_veth.c
index 16529148..8db07ad2 100644
--- a/lib/ff_veth.c
+++ b/lib/ff_veth.c
@@ -209,23 +209,19 @@ ff_mbuf_tx_offload(void *m, struct ff_tx_offload *offload)
 {
     struct mbuf *mb = (struct mbuf *)m;
     if (mb->m_pkthdr.csum_flags & CSUM_IP) {
-        offload->ip_csum = 1;
+	    offload->ip_csum = 1;
     }
 
     if (mb->m_pkthdr.csum_flags & CSUM_TCP) {
-        offload->tcp_csum = 1;
+	    offload->tcp_csum = 1;
     }
 
     if (mb->m_pkthdr.csum_flags & CSUM_UDP) {
-        offload->udp_csum = 1;
-    }
+	    offload->udp_csum = 1;   
+    }  
 
     if (mb->m_pkthdr.csum_flags & CSUM_SCTP) {
-        offload->sctp_csum = 1;
-    }
-
-    if (mb->m_pkthdr.csum_flags & CSUM_TSO) {
-        offload->tso_seg_size = mb->m_pkthdr.tso_segsz;
+	    offload->sctp_csum = 1;    
     }
 }
 
@@ -302,7 +298,7 @@ ff_zc_mbuf_read(struct ff_zc_mbuf *m, const char *data, int len)
 
 void *
 ff_mbuf_gethdr(void *pkt, uint16_t total, void *data,
-    uint16_t len, uint8_t rx_csum)
+    uint16_t len)
 {
     struct mbuf *m = m_gethdr(M_NOWAIT, MT_DATA);
     if (m == NULL) {
@@ -320,11 +316,10 @@ ff_mbuf_gethdr(void *pkt, uint16_t total, void *data,
     m->m_next = NULL;
     m->m_nextpkt = NULL;
 
-    if (rx_csum) {
-        m->m_pkthdr.csum_flags = CSUM_IP_CHECKED | CSUM_IP_VALID |
-            CSUM_DATA_VALID | CSUM_PSEUDO_HDR;
-        m->m_pkthdr.csum_data = 0xffff;
-    }
+    m->m_pkthdr.csum_flags = CSUM_IP_CHECKED | CSUM_IP_VALID |
+        CSUM_DATA_VALID | CSUM_PSEUDO_HDR;
+    m->m_pkthdr.csum_data = 0xffff;
+
     return (void *)m;
 }
 
@@ -607,19 +602,13 @@ ff_veth_setup_interface(struct ff_veth_softc *sc, struct ff_port_cfg *cfg)
     ifp->if_qflush = ff_veth_qflush;
     ether_ifattach(ifp, sc->mac);
 
-    if (cfg->hw_features.rx_csum) {
-        ifp->if_capabilities |= IFCAP_RXCSUM;
-    }
-    if (cfg->hw_features.tx_csum_ip) {
-        ifp->if_capabilities |= IFCAP_TXCSUM;
-        ifp->if_hwassist |= CSUM_IP;
+    if (cfg->hw_features.tx_csum_ip) {   
+	    ifp->if_capabilities |= IFCAP_TXCSUM;
+	    ifp->if_hwassist |= CSUM_IP;
     }
+	
     if (cfg->hw_features.tx_csum_l4) {
-        ifp->if_hwassist |= CSUM_DELAY_DATA;
-    }
-    if (cfg->hw_features.tx_tso) {
-        ifp->if_capabilities |= IFCAP_TSO;
-        ifp->if_hwassist |= CSUM_TSO;
+	    ifp->if_hwassist |= CSUM_DELAY_DATA;
     }
 
     ifp->if_capenable = ifp->if_capabilities;
diff --git a/lib/ff_veth.h b/lib/ff_veth.h
index 627662f6..cacf0775 100644
--- a/lib/ff_veth.h
+++ b/lib/ff_veth.h
@@ -32,7 +32,7 @@ void *ff_veth_attach(struct ff_port_cfg *cfg);
 int ff_veth_detach(void *arg);
 
 void *ff_mbuf_gethdr(void *pkt, uint16_t total, void *data,
-    uint16_t len, uint8_t rx_csum);
+    uint16_t len);
 void *ff_mbuf_get(void *p, void *m, void *data, uint16_t len);
 void ff_mbuf_free(void *m);
 
